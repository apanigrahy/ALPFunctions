dplyr::filter(is.na(!!sym(a)))
if (nrow(num_missing) >= 1) {
if (is.character(students[[a]])) {
levels_before <- students %>%
filter(!is.na(!!sym(a))) %>%
count(!!sym(a)) %>%
pull(!!sym(a))
students <- students %>%
mutate(!!sym(a) := str_replace_na(.[[a]], "Missing")) %>%
mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "Missing")
))
rm(levels_before)
}
if (is.factor(students[[a]])) {
levels_before <- levels(students[[a]])
students <- students %>%
mutate(!!sym(a) := str_replace_na(.[[a]], "Missing")) %>%
mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "Missing")
))
rm(levels_before)
}
} else {
if(is.character(students[[a]])){
students <- students %>%
dplyr::mutate(!!sym(a) := as.factor(!!sym(a)))
}
}
}
}
is.character(students[[a]])
students <- read_excel(here("Testing", "Data", "student_performance_data.xlsx"))
students <- students %>%
mutate(gender = case_match(gender,
0 ~ "Male",
1 ~ "Female"),
ethnicity = case_match(ethnicity,
0 ~ "Caucasian",
1 ~ "African American",
2 ~ "Asian",
3 ~ "Other"),
tutoring = case_match(tutoring,
1 ~ "Yes",
0 ~ "No")) %>%
mutate(age = as.numeric(age),
gender = factor(gender,
levels = c("Male", "Female")),
ethnicity = factor(ethnicity,
levels = c("Caucasian",
"African American",
"Asian",
"Other")),
parental_education = fct_inseq(factor(parental_education)),
sports = as.character(sports)) %>%
mutate(across(c("parental_support", "extracurricular"), as_factor))
set.seed(123)
students[sample(1:nrow(students), 125),c(3:5,11)] <- NA
a <- "sports"
is.character(students[[a]]) |
is.factor(students[[a]])
num_missing <- students %>%
dplyr::filter(is.na(!!sym(a)))
is.character(students[[a]])
levels_before <- students %>%
filter(!is.na(!!sym(a))) %>%
count(!!sym(a)) %>%
pull(!!sym(a))
students <- students %>%
mutate(!!sym(a) := str_replace_na(.[[a]], "Missing")) %>%
mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "Missing")
))
rm(levels_before)
styler:::style_selection()
students <- read_excel(here("Testing", "Data", "student_performance_data.xlsx"))
students <- students %>%
mutate(gender = case_match(gender,
0 ~ "Male",
1 ~ "Female"),
ethnicity = case_match(ethnicity,
0 ~ "Caucasian",
1 ~ "African American",
2 ~ "Asian",
3 ~ "Other"),
tutoring = case_match(tutoring,
1 ~ "Yes",
0 ~ "No")) %>%
mutate(age = as.numeric(age),
gender = factor(gender,
levels = c("Male", "Female")),
ethnicity = factor(ethnicity,
levels = c("Caucasian",
"African American",
"Asian",
"Other")),
parental_education = fct_inseq(factor(parental_education)),
sports = as.character(sports)) %>%
mutate(across(c("parental_support", "extracurricular"), as_factor))
set.seed(123)
students[sample(1:nrow(students), 125),c(3:5,11)] <- NA
for (a in colnames(students)) {
if (is.character(students[[a]]) |
is.factor(students[[a]])) {
num_missing <- students %>%
dplyr::filter(is.na(!!sym(a)))
if (nrow(num_missing) >= 1) {
if (is.character(students[[a]])) {
levels_before <- students %>%
filter(!is.na(!!sym(a))) %>%
count(!!sym(a)) %>%
pull(!!sym(a))
students <- students %>%
mutate(!!sym(a) := str_replace_na(.[[a]], "Missing")) %>%
mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "Missing")
))
rm(levels_before)
} else if (is.factor(students[[a]])) {
levels_before <- levels(students[[a]])
students <- students %>%
mutate(!!sym(a) := str_replace_na(.[[a]], "Missing")) %>%
mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "Missing")
))
rm(levels_before)
}
} else {
if (is.character(students[[a]])) {
students <- students %>%
dplyr::mutate(!!sym(a) := as.factor(!!sym(a)))
}
}
}
}
rm(a)
rm(x)
glimpse(students)
gt_flex_table(students)
styler:::style_selection()
#' @param type_list
#' @param add_p
#' @param add_total_col
#' @param header_text
#' @param return_object
#'
#' @return
#' @export
#'
#' @examples
gt_flex_table <- function(data_frame,
group_by = NULL,
label_list = list(),
digits_list = list(),
value_list = list(),
type_list = list(),
add_p = FALSE,
add_total_col = FALSE,
header_text = "**Table 1: Insert Table Title**",
return_object = "flextable"){
# If label_list is empty, set to NULL
if(length(label_list) == 0){
label_list <- NULL
}
# If digits_list is empty, set to NULL
if(length(digits_list) == 0){
digits_list <- NULL
}
# If value_list is empty, set to NULL
if(length(value_list) == 0){
value_list <- NULL
}
# Append digist_list if applicable
digits <- list(all_continuous2() ~ 1)
digits_list <- c(digits, digits_list)
# Append type_list if applicable
types <- list(all_continuous() ~ "continuous2",
all_dichotomous() ~ "categorical")
type_list <- c(types, type_list)
# Replace all NA's for character and factors with "N Missing %"
for (a in colnames(data_frame)) {
# Check if variable is character or factor
if (is.character(data_frame[[a]]) |
is.factor(data_frame[[a]])) {
# Count number rows with missing data
num_missing <- data_frame %>%
dplyr::filter(is.na(!!sym(a)))
# If any rows are missing data
if (nrow(num_missing) >= 1) {
# If character variable, pull unique characters as levels,
# replace NA's, convert variable to factor with those levels and
# include N Missing
if (is.character(data_frame[[a]])) {
levels_before <- data_frame %>%
dplyr::filter(!is.na(!!sym(a))) %>%
dplyr::count(!!sym(a)) %>%
dplyr::arrange(!!sym(a)) %>%
pull(!!sym(a))
data_frame <- data_frame %>%
dplyr::mutate(!!sym(a) := str_replace_na(.[[a]], "N Missing (%)")) %>%
dplyr::mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "N Missing (%)")
))
rm(levels_before)
# If already a factor variable, replace NA's and add factor levels back
# with missing added
} else if (is.factor(data_frame[[a]])) {
levels_before <- levels(data_frame[[a]])
data_frame <- data_frame %>%
dplyr::mutate(!!sym(a) := str_replace_na(.[[a]], "N Missing (%)")) %>%
dplyr::mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "N Missing (%)")
))
rm(levels_before)
}
} else {
if (is.character(data_frame[[a]])) {
data_frame <- data_frame %>%
dplyr::mutate(!!sym(a) := as.factor(!!sym(a)))
}
}
}
}
rm(a)
# Create initial gtsummary table
gt_tbl <- data_frame %>%
gtsummary::tbl_summary(
by = {{group_by}},
type = type_list,
label = label_list,
value = value_list,
digits = digits_list,
statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}-{p75})",
"{min}-{max}"),
all_categorical() ~ "{n} ({p}%)"),
missing_text = "N Missing (%)",
missing_stat = "{N_miss} ({p_miss}%)"
)
# Add statistics with p-values if applicable
if(add_p == TRUE){
gt_tbl <- gt_tbl %>%
gtsummary::add_p()
}
# Add overall column if applicable
if(add_total_col == TRUE){
gt_tbl <- gt_tbl %>%
gtsummary::add_overall()
}
# Finalize gt table parameters and add header
gt_tbl <- gt_tbl %>%
gtsummary::add_stat_label(label = list(
all_continuous() ~ c("Mean (SD)", "Median (IQR)","Min-Max"),
all_categorical() ~"n (%)")) %>%
gtsummary::modify_header(label ~ "**Variable**",
all_stat_cols() ~ "**{level}**\n(n = {n})") %>%
gtsummary::modify_spanning_header(
everything() ~ header_text
) %>%
gtsummary::bold_labels()
# Remove the ", n%" from categorical variable labels
gt_tbl$table_body$stat_label <- NA
# Create and return flextable object if applicable
if(return_object == "flextable"){
tbl_flx <- gt_tbl %>% gtsummary::as_flex_table()
tbl_flx <- tbl_flx %>%
flextable::hline_top(border = fp_border_default(width = 0),
part = "header")  %>%
flextable::align(align = "center", part = "header") %>%
flextable::align(align = "center", part = "body",
j = c(2:length(cols))) %>%
flextable::align(align = "left", part = "body", j = 1) %>%
flextable::font(fontname = "Albany AMT", part = "all") %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::fontsize(size = 10, part = "body") %>%
flextable::fontsize(size = 10, part = "footer")
return(tbl_flx)
}else{
return(gt_tbl)
}
}
students <- read_excel(here("Testing", "Data", "student_performance_data.xlsx"))
students <- students %>%
mutate(gender = case_match(gender,
0 ~ "Male",
1 ~ "Female"),
ethnicity = case_match(ethnicity,
0 ~ "Caucasian",
1 ~ "African American",
2 ~ "Asian",
3 ~ "Other"),
tutoring = case_match(tutoring,
1 ~ "Yes",
0 ~ "No")) %>%
mutate(age = as.numeric(age),
gender = factor(gender,
levels = c("Male", "Female")),
ethnicity = factor(ethnicity,
levels = c("Caucasian",
"African American",
"Asian",
"Other")),
parental_education = fct_inseq(factor(parental_education)),
sports = as.character(sports)) %>%
mutate(across(c("parental_support", "extracurricular"), as_factor))
set.seed(123)
students[sample(1:nrow(students), 125),c(3:5,11)] <- NA
gt_flex_table(students)
gt_flex_table(students,
group_by = tutoring)
students <- read_excel(here("Testing", "Data", "student_performance_data.xlsx"))
library(readxl)
library(tidyverse)
library(here)
students <- read_excel(here("Testing", "Data", "student_performance_data.xlsx"))
students <- students %>%
mutate(gender = case_match(gender,
0 ~ "Male",
1 ~ "Female"),
ethnicity = case_match(ethnicity,
0 ~ "Caucasian",
1 ~ "African American",
2 ~ "Asian",
3 ~ "Other"),
tutoring = case_match(tutoring,
1 ~ "Yes",
0 ~ "No")) %>%
mutate(age = as.numeric(age),
gender = factor(gender,
levels = c("Male", "Female")),
ethnicity = factor(ethnicity,
levels = c("Caucasian",
"African American",
"Asian",
"Other")),
parental_education = fct_inseq(factor(parental_education)),
sports = as.character(sports)) %>%
mutate(across(c("parental_support", "extracurricular"), as_factor))
set.seed(123)
students[sample(1:nrow(students), 125),c(3:5,11)] <- NA
#' @param type_list
#' @param add_p
#' @param add_total_col
#' @param header_text
#' @param return_object
#'
#' @return
#' @export
#'
#' @examples
gt_flex_table <- function(data_frame,
group_by = NULL,
label_list = list(),
digits_list = list(),
value_list = list(),
type_list = list(),
add_p = FALSE,
add_total_col = FALSE,
header_text = "**Table 1: Insert Table Title**",
return_object = "flextable"){
# If label_list is empty, set to NULL
if(length(label_list) == 0){
label_list <- NULL
}
# If digits_list is empty, set to NULL
if(length(digits_list) == 0){
digits_list <- NULL
}
# If value_list is empty, set to NULL
if(length(value_list) == 0){
value_list <- NULL
}
# Append digist_list if applicable
digits <- list(all_continuous2() ~ 1)
digits_list <- c(digits, digits_list)
# Append type_list if applicable
types <- list(all_continuous() ~ "continuous2",
all_dichotomous() ~ "categorical")
type_list <- c(types, type_list)
# Replace all NA's for character and factors with "N Missing %"
for (a in colnames(data_frame)) {
# Check if variable is character or factor
if (is.character(data_frame[[a]]) |
is.factor(data_frame[[a]])) {
# Count number rows with missing data
num_missing <- data_frame %>%
dplyr::filter(is.na(!!sym(a)))
# If any rows are missing data
if (nrow(num_missing) >= 1) {
# If character variable, pull unique characters as levels,
# replace NA's, convert variable to factor with those levels and
# include N Missing
if (is.character(data_frame[[a]])) {
levels_before <- data_frame %>%
dplyr::filter(!is.na(!!sym(a))) %>%
dplyr::count(!!sym(a)) %>%
dplyr::arrange(!!sym(a)) %>%
pull(!!sym(a))
data_frame <- data_frame %>%
dplyr::mutate(!!sym(a) := str_replace_na(.[[a]], "N Missing (%)")) %>%
dplyr::mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "N Missing (%)")
))
rm(levels_before)
# If already a factor variable, replace NA's and add factor levels back
# with missing added
} else if (is.factor(data_frame[[a]])) {
levels_before <- levels(data_frame[[a]])
data_frame <- data_frame %>%
dplyr::mutate(!!sym(a) := str_replace_na(.[[a]], "N Missing (%)")) %>%
dplyr::mutate(!!sym(a) := factor(!!sym(a),
levels = c(levels_before, "N Missing (%)")
))
rm(levels_before)
}
} else {
if (is.character(data_frame[[a]])) {
data_frame <- data_frame %>%
dplyr::mutate(!!sym(a) := as.factor(!!sym(a)))
}
}
}
}
rm(a)
# Create initial gtsummary table
gt_tbl <- data_frame %>%
gtsummary::tbl_summary(
by = {{group_by}},
type = type_list,
label = label_list,
value = value_list,
digits = digits_list,
statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}-{p75})",
"{min}-{max}"),
all_categorical() ~ "{n} ({p}%)"),
missing_text = "N Missing (%)",
missing_stat = "{N_miss} ({p_miss}%)"
)
# Add statistics with p-values if applicable
if(add_p == TRUE){
gt_tbl <- gt_tbl %>%
gtsummary::add_p()
}
# Add overall column if applicable
if(add_total_col == TRUE){
gt_tbl <- gt_tbl %>%
gtsummary::add_overall()
}
# Finalize gt table parameters and add header
gt_tbl <- gt_tbl %>%
gtsummary::add_stat_label(label = list(
all_continuous() ~ c("Mean (SD)", "Median (IQR)","Min-Max"),
all_categorical() ~"n (%)")) %>%
gtsummary::modify_header(label ~ "**Variable**",
all_stat_cols() ~ "**{level}**\n(n = {n})") %>%
gtsummary::modify_spanning_header(
everything() ~ header_text
) %>%
gtsummary::bold_labels()
# Remove the ", n%" from categorical variable labels
gt_tbl$table_body$stat_label <- NA
# Create and return flextable object if applicable
if(return_object == "flextable"){
tbl_flx <- gt_tbl %>% gtsummary::as_flex_table()
tbl_flx <- tbl_flx %>%
flextable::hline_top(border = fp_border_default(width = 0),
part = "header")  %>%
flextable::align(align = "center", part = "header") %>%
flextable::align(align = "center", part = "body",
j = c(2:length(cols))) %>%
flextable::align(align = "left", part = "body", j = 1) %>%
flextable::font(fontname = "Albany AMT", part = "all") %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::fontsize(size = 10, part = "body") %>%
flextable::fontsize(size = 10, part = "footer")
return(tbl_flx)
}else{
return(gt_tbl)
}
}
View(students)
View(students)
gt_flex_table(students)
library(gtsummary)
library(flextable)
gt_flex_table(students,
group_by = tutoring,
digits_list = list(study_time_weekly ~ 3))
gt_flex_table(students,
group_by = tutoring,
digits_list = list(study_time_weekly ~ 0))
gt_flex_table(students,
group_by = tutoring,
digits_list = list(study_time_weekly ~ 2),
label_list = list(age ~ "Age Test"))
gt_flex_table(students,
group_by = tutoring,
digits_list = list(study_time_weekly ~ 2),
label_list = list(age ~ "Age Test"),
value_list = list(age ~ "continuous2"))
gt_flex_table(students,
group_by = tutoring,
digits_list = list(study_time_weekly ~ 2),
label_list = list(age ~ "Age Test"),
type_list = list(parental_education ~ "continuous2"))
gt_flex_table(students,
group_by = tutoring,
digits_list = list(study_time_weekly ~ 2),
label_list = list(age ~ "Age Test"),
type_list = list(age ~ "continuous2"))
?tbl_summary
