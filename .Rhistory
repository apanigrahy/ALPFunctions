colnames(ct_data)
load("C:/Users/anand/OneDrive/Desktop/AP_Functions/ALPFunctions/data/paired_ct_data.rda")
View(paired_ct_data)
View(paired_ct_data)
View(paired_ct_data)
devtools::document()
use_readme_rmd()
pkgload::dev_help('paired_ct_data')
# Load package
library(ALPFunctions)
# Load test dataset
data("ct_data")
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
devtools::install()
# Load package
library(ALPFunctions)
# Load test dataset
data("ct_data")
force(ct_data)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
# Load package
library(ALPFunctions)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
devtools::document()
devtools::install()
# Load package
library(ALPFunctions)
# Load test dataset
data("ct_data")
force(ct_data)
library(devtools)
document()
install()
# Load package
library(ALPFunctions)
# Load test dataset
data(ct_data)
force(ct_data)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
use_package("rlang")
document()
library(devtools)
install()
# Load package
library(ALPFunctions)
# Load test dataset
data(ct_data)
force(ct_data)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
library(devtools)
document()
install()
# Load package
library(ALPFunctions)
# Load test dataset
data(ct_data)
force(ct_data)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
library(devtools)
document()
devtools::document()
devtools::install()
# Load package
library(ALPFunctions)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
devtools::document()
devtools::install()
# Load package
library(ALPFunctions)
# Load test dataset
data(ct_data)
force(ct_data)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
temp <- gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE,
return_object = "gt")
+               group_by = trt_group,
temp
nrow(temp$table_body)
ncol(temp$table_body)
tbl_flx <- gt_tbl %>% gtsummary::as_flex_table()
library(magrittr)
tbl_flx <- temp %>% gtsummary::as_flex_table()
ncol(tbl_flx)
temp$table_body
temp$table_styling
temp$cards
temp$table_body
temp2 <- temp$table_body
View(temp2)
gt_table <- as_gt(tbl)
library(gtsummary)
gt_table <- as_gt(temp)
ncol(gt_table$`_data`)
gt_table$`_col_merge`
temp$table_styling$header
temp$table_styling$header$column
temp$table_styling$cols_merge
data_frame <- ct_data
group_by = trt_group
group_by = {{trt_group}}
#' @param return_object Specifies what object
#'
#' @import gtsummary
#' @import flextable
#' @importFrom dplyr arrange case_when count filter mutate pull
#' @importFrom stringr str_replace_na
#' @importFrom magrittr %>%
#'
#' @return Returns a flextable or gtsummary table object
#' @export
gt_flex_table <- function(data_frame,
group_by = NULL,
label_list = list(),
digits_list = list(),
value_list = list(),
type_list = list(),
include = everything(),
add_p = FALSE,
add_p_test = NULL,
add_p_test_args = NULL,
add_p_group = NULL,
add_total_col = FALSE,
header_text = "**Table 1: Insert Table Title**",
return_object = "flextable"){
# If label_list is empty, set to NULL
if(length(label_list) == 0){
label_list <- NULL
}
# If digits_list is empty, set to NULL
if(length(digits_list) == 0){
digits_list <- NULL
}
# If value_list is empty, set to NULL
if(length(value_list) == 0){
value_list <- NULL
}
# Append digist_list if applicable
digits <- list(all_continuous2() ~ 1)
digits_list <- c(digits, digits_list)
# Append type_list if applicable
types <- list(all_continuous() ~ "continuous2",
all_dichotomous() ~ "categorical")
type_list <- c(types, type_list)
# Replace all NA's for character and factors with "N Missing %"
for (a in colnames(data_frame)) {
# Check if variable is character or factor
if (is.character(data_frame[[a]]) |
is.factor(data_frame[[a]])) {
# Count number rows with missing data
num_missing <- data_frame %>%
dplyr::filter(is.na(!!rlang::sym(a)))
# If any rows are missing data
if (nrow(num_missing) >= 1) {
# If character variable, pull unique characters as levels,
# replace NA's, convert variable to factor with those levels and
# include N Missing
if (is.character(data_frame[[a]])) {
levels_before <- data_frame %>%
dplyr::filter(!is.na(!!rlang::sym(a))) %>%
dplyr::count(!!rlang::sym(a)) %>%
dplyr::arrange(!!rlang::sym(a)) %>%
dplyr::pull(!!rlang::sym(a))
data_frame <- data_frame %>%
dplyr::mutate(!!rlang::sym(a) := stringr::str_replace_na(.[[a]], "N Missing (%)")) %>%
dplyr::mutate(!!rlang::sym(a) := factor(!!rlang::sym(a),
levels = c(levels_before, "N Missing (%)")
))
rm(levels_before)
# If already a factor variable, replace NA's and add factor levels back
# with missing added
} else if (is.factor(data_frame[[a]])) {
levels_before <- levels(data_frame[[a]])
data_frame <- data_frame %>%
dplyr::mutate(!!rlang::sym(a) := stringr::str_replace_na(.[[a]], "N Missing (%)")) %>%
dplyr::mutate(!!rlang::sym(a) := factor(!!rlang::sym(a),
levels = c(levels_before, "N Missing (%)")
))
rm(levels_before)
}
} else {
if (is.character(data_frame[[a]])) {
data_frame <- data_frame %>%
dplyr::mutate(!!rlang::sym(a) := as.factor(!!rlang::sym(a)))
}
}
}
}
rm(a)
# If group is specified, calculate number of columns that will be displayed
if(!is.null({{group_by}})){
ncol <- data_frame %>%
dplyr::filter(!is.na({{group_by}})) %>%
dplyr::count({{group_by}}) %>%
nrow()
}
# Create initial gtsummary table
gt_tbl <- data_frame %>%
gtsummary::tbl_summary(
by = {{group_by}},
type = type_list,
label = label_list,
value = value_list,
digits = digits_list,
include = {{include}},
statistic = list(all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}-{p75})",
"{min}-{max}"),
all_categorical() ~ "{n} ({p}%)"),
missing_text = "N Missing (%)",
missing_stat = "{N_miss} ({p_miss}%)"
)
# Create function to format p-values
format_p_value <- function(p) {
dplyr::case_when(
is.na(p) ~ " ",
p < 0.0001 ~ "<0.0001",
p > 0.9999 ~ ">0.9999",
TRUE ~ sprintf("%.4f", p) # Display p-values with 4 digits
)
}
# Add statistics with p-values if applicable
if(add_p == TRUE){
gt_tbl <- gt_tbl %>%
gtsummary::add_p(
test = add_p_test,
test.args = add_p_test_args,
group = {{add_p_group}},
pvalue_fun = format_p_value
)
}
# Add overall column if applicable
if(add_total_col == TRUE){
gt_tbl <- gt_tbl %>%
gtsummary::add_overall()
}
# Finalize gt table parameters and add header
gt_tbl <- gt_tbl %>%
gtsummary::add_stat_label(label = list(
all_continuous() ~ c("Mean (SD)", "Median (IQR)","Min-Max"),
all_categorical() ~"n (%)")) %>%
gtsummary::modify_header(label ~ "**Variable**",
all_stat_cols() ~ "**{level}**\n(n = {n})") %>%
gtsummary::modify_spanning_header(
everything() ~ header_text
) %>%
gtsummary::bold_labels()
# Remove the ", n%" from categorical variable labels
gt_tbl$table_body$stat_label <- NA
# Create and return flextable object if applicable
if(return_object == "flextable"){
cols <- ncol(gt_tbl)
tbl_flx <- gt_tbl %>% gtsummary::as_flex_table()
tbl_flx <- tbl_flx %>%
flextable::hline_top(border = fp_border_default(width = 0),
part = "header")  %>%
flextable::align(align = "center", part = "header") %>%
flextable::align(align = "center", part = "body",
j = c(2:length(cols))) %>%
flextable::align(align = "left", part = "body", j = 1) %>%
flextable::font(fontname = "Albany AMT", part = "all") %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::fontsize(size = 10, part = "body") %>%
flextable::fontsize(size = 10, part = "footer")
return(tbl_flx)
}else{
return(gt_tbl)
}
}
gt_flex_table(ct_data, group_by = trt_group)
tbl_flx$header
tbl_flx$header$dataset
ncol(tbl_flx$header$dataset)
library(devtools)
document()
devtools::install()
# Load package
library(ALPFunctions)
# Load test dataset
data(ct_data)
force(ct_data)
gt_flex_table(ct_data,
group_by = trt_group,
add_p = TRUE)
devtools::build_readme()
library(devtools)
use_mit_license()
devtools::document()
devtools::install()
git_sitrep()
usethis::create_github_token()
gitcreds::gitcreds_set()
git_sitrep()
?remotes::install_github
github_pat()
?github_pat
.Renviron
usethis::github_pat
usethis::git_sitrep()
library(tidyverse)
library(nlme)
library(broom)
library(broom.mixed)
data("paired_ct_data")
View(paired_ct_data)
View(paired_ct_data)
?nlme::lme
lm_model <- lme(bp ~ treat_time + age + sex,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = reml)
lm_model <- lme(bp ~ treat_time + age + sex,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML")
lm_model <- lme(bp ~ treat_time + age + sex,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit())
lm_model <- lme(bp ~ treat_time + age + sex,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
broom.mixed::tidy(lm_model)
plot(lm_model)
lm_model <- lme(bp ~ treat_time,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
broom.mixed::tidy(lm_model)
lm_model <- lme(bp ~ treat_time + age,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
lm_model <- lme(bp ~ treat_time,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
lm_model <- lme(bp ~ treat_time + age + sex,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
broom.mixed::tidy(lm_model, conf.int = TRUE)
res <- broom.mixed::tidy(lm_model, conf.int = TRUE)
View(res)
paired_ct_data <- paired_ct_data %>%
mutate(treat_time = factor(treat_time,
levels = c("Pre-Treatment",
"Post-Treatment")),
sex = factor(sex,
levels = c("Male", "Female")))
lm_model <- lme(bp ~ treat_time + age + sex,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
lm_model <- lme(bp ~ treat_time,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
View(res)
temp <- summary(lm_model)
temp$coefficients
temp$varFix
lm_model <- lme(bp ~ treat_time + age + sex,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
temp <- summary(lm_model)
temp$varFix
res <- broom.mixed::tidy(lm_model, conf.int = TRUE)
View(res)
colnames(paired_ct_data)
lm_model <- lme(bp ~ treat_time + age + sex + race,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
summary(lm_model)
res <- broom.mixed::tidy(lm_model, conf.int = TRUE)
View(res)
library(usethis)
library(lme4)
?lmer
lme4_model <- lmer(bp ~ treat_time + age + sex + race + (treat_time|participant_id),
data = paired_ct_data)
lme4_model <- lmer(bp ~ treat_time
+ (treat_time|participant_id),
data = paired_ct_data)
lme4_model <- lmer(bp ~ treat_time
+ (treat_time|participant_id),
data = paired_ct_data,
na.action = na.omit)
paired_ct_data_v2 <- paired_ct_data %>%
mutate(treat_time = case_match(treat_time,
"Pre-Treatment" ~ 0,
"Post-Treatment" ~ 1))
View(paired_ct_data_v2)
lme4_model <- lmer(bp ~ treat_time
+ (treat_time|participant_id),
data = paired_ct_data,
na.action = na.omit)
lme4_model <- lmer(bp ~ treat_time
+ (treat_time|participant_id),
data = paired_ct_data_v2,
na.action = na.omit)
data("paired_ct_data")
paired_ct_data <- paired_ct_data %>%
mutate(treat_time = factor(treat_time,
levels = c("Pre-Treatment",
"Post-Treatment")),
sex = factor(sex,
levels = c("Male", "Female")))
lm_model <- lme(bp ~ treat_time + age + sex + race,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
data(Orthodont,package="nlme")
Orthodont$nsex <- as.numeric(Orthodont$Sex=="Male")
Orthodont$nsexage <- with(Orthodont, nsex*age)
lmer_model <- lmer(distance ~ age + (age|Subject) + (0+nsex|Subject) +
(0 + nsexage|Subject), data=Orthodont)
summary(lmer_model)
gtsummary::tbl_regression(lmer_model)
View(Orthodont)
data("paired_ct_data")
paired_ct_data <- paired_ct_data %>%
mutate(treat_time = factor(treat_time,
levels = c("Pre-Treatment",
"Post-Treatment")),
sex = factor(sex,
levels = c("Male", "Female")))
lm_model <- lme(bp ~ treat_time + age + sex + race,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
usethis::use_r("lme_summarize")
gls_model <- gls(bp ~ treat_time + age + sex + race,
data = paired_ct_data,
method = "ML",
na.action = na.omit)
broom::tidy(gls_model)
broom::tidy(gls_model, conf.int = TRUE)
paired_ct_data <- paired_ct_data %>%
mutate(treat_time = factor(treat_time,
levels = c("Pre-Treatment",
"Post-Treatment")),
sex = factor(sex,
levels = c("Male", "Female")),
race = facto(race,
levels = c("White", "Black", "Asian",
"Hispanic")))
paired_ct_data <- paired_ct_data %>%
mutate(treat_time = factor(treat_time,
levels = c("Pre-Treatment",
"Post-Treatment")),
sex = factor(sex,
levels = c("Male", "Female")),
race = factor(race,
levels = c("White", "Black", "Asian",
"Hispanic")))
lm_model <- lme(bp ~ treat_time + age + sex + race,
random = ~ 1 | participant_id,
data = paired_ct_data,
method = "REML",
na.action = na.omit)
gls_model <- gls(bp ~ treat_time + age + sex + race,
data = paired_ct_data,
method = "ML",
na.action = na.omit)
broom::tidy(gls_model, conf.int = TRUE)
?broom::tidy
inherits(gls_model)
str(gls_model)
class(lm_model)
class(gls_model)
inherits(lm_model, "gls")
use_r("lme_res_diagnose")
